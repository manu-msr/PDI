package procesador;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Universidad Nacional Autónoma de México
 * Facultad de Ciencias - Licenciatura en Ciencias de la Computación
 * PROCESO DIGITAL DE IMÁGENES 2016-1
 * Profesor:    Manuel Cristóbal López Michelone
 * Ayudante:    Yessica Martínez Reyes
 * Laboratorio: César Hernández Solis
 * 
 * SOTO ROMERO MANUEL 310204675
 * 
 * Clase para trabajar con la interfaz gráfica del Procesador de Imágenes. Se
 * encarga de mostrar la imagen, mostrar los filtros aplicados a la misma,
 * y llamar a las operaciones de cargar y guardar.
 * 
 * Nota: La interfaz Gráfica se hizo en NetBeans.
 */
public class Vista extends javax.swing.JFrame {
    
    /* Imagen con la que trabajará el procesador. */
    private BufferedImage imagen;
    /* Procesador para aplicar los filtros. */
    private final Procesador procesador;
    /* Copia la imagen original con la que se trabajará. */
    private BufferedImage copia;

    /**
     * Clase para probar distintos filtros.
     */
    public Vista() {
        initComponents();
        /* Para que el panel principal aparezca centrado. */
        this.setLocationRelativeTo(null);
        /* Le quitamos el texto a la etiqueta para poner la imagen ahí. */
        img.setText(null);
        /* Le quitamos el texto a la barra de progreso. */
        progreso.setText(null);
        /* Procesador para modificar la imagen. */
        procesador = new Procesador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        img = new javax.swing.JLabel();
        progreso = new javax.swing.JTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        reiniciar = new javax.swing.JMenuItem();
        menu_ajusteDeColor = new javax.swing.JMenu();
        rojo = new javax.swing.JMenuItem();
        verde = new javax.swing.JMenuItem();
        azul = new javax.swing.JMenuItem();
        rgb = new javax.swing.JMenuItem();
        brillo = new javax.swing.JMenuItem();
        azar = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        grisesPromedio = new javax.swing.JMenuItem();
        grisesLuma = new javax.swing.JMenuItem();
        grisesDesaturation = new javax.swing.JMenuItem();
        grisesDescomposition = new javax.swing.JMenuItem();
        grisesSingleColor = new javax.swing.JMenuItem();
        grisesShades = new javax.swing.JMenuItem();
        grisesDithering = new javax.swing.JMenuItem();
        sepia = new javax.swing.JMenuItem();
        luzNegra = new javax.swing.JMenuItem();
        menu_mosaicos = new javax.swing.JMenu();
        mosaico = new javax.swing.JMenuItem();
        recursivas = new javax.swing.JMenuItem();
        sopaLetras = new javax.swing.JMenuItem();
        hombresNegro = new javax.swing.JMenuItem();
        menu_contrastes = new javax.swing.JMenu();
        inverso = new javax.swing.JMenuItem();
        altoContraste = new javax.swing.JMenuItem();
        semitonos = new javax.swing.JMenuItem();
        menu_artisticos = new javax.swing.JMenu();
        att = new javax.swing.JMenuItem();
        menu_combinar = new javax.swing.JMenu();
        blending = new javax.swing.JMenuItem();
        menu_iconos = new javax.swing.JMenu();
        favicon = new javax.swing.JMenuItem();
        creadorIconos = new javax.swing.JMenuItem();
        menu_marcaAgua = new javax.swing.JMenu();
        marcaAgua = new javax.swing.JMenuItem();
        menu_rotar = new javax.swing.JMenu();
        rotar = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Procesador de Imágenes Manu.S.R.");

        img.setText("jLabel1");

        progreso.setEditable(false);
        progreso.setText("jTextField1");

        menu_archivo.setText("Archivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        menu_archivo.add(abrir);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        menu_archivo.add(guardar);

        reiniciar.setText("Reiniciar");
        reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarActionPerformed(evt);
            }
        });
        menu_archivo.add(reiniciar);

        jMenuBar2.add(menu_archivo);

        menu_ajusteDeColor.setText("Ajuste de color");

        rojo.setText("Filtro Rojo");
        rojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(rojo);

        verde.setText("Filtro Verde");
        verde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verdeActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(verde);

        azul.setText("Filtro Azul");
        azul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azulActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(azul);

        rgb.setText("Filtro RGB");
        rgb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(rgb);

        brillo.setText("Filtro Brillo");
        brillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brilloActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(brillo);

        azar.setText("Filtro Azar");
        azar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azarActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(azar);

        jMenu3.setText("Filtros Escala de Grises");

        grisesPromedio.setText("Filtro Grises \"Average\"");
        grisesPromedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesPromedioActionPerformed(evt);
            }
        });
        jMenu3.add(grisesPromedio);

        grisesLuma.setText("Filtro Grises \"Luma\"");
        grisesLuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesLumaActionPerformed(evt);
            }
        });
        jMenu3.add(grisesLuma);

        grisesDesaturation.setText("Filtro Grises \"Desaturation\"");
        grisesDesaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesDesaturationActionPerformed(evt);
            }
        });
        jMenu3.add(grisesDesaturation);

        grisesDescomposition.setText("Filtro Grises \"Descomposition\"");
        grisesDescomposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesDescompositionActionPerformed(evt);
            }
        });
        jMenu3.add(grisesDescomposition);

        grisesSingleColor.setText("Filtro Grises \"Single color\"");
        grisesSingleColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesSingleColorActionPerformed(evt);
            }
        });
        jMenu3.add(grisesSingleColor);

        grisesShades.setText("Filtro Grises \"Shades\"");
        grisesShades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesShadesActionPerformed(evt);
            }
        });
        jMenu3.add(grisesShades);

        grisesDithering.setText("Filtro Grises \"Dithering\"");
        grisesDithering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesDitheringActionPerformed(evt);
            }
        });
        jMenu3.add(grisesDithering);

        menu_ajusteDeColor.add(jMenu3);

        sepia.setText("Filtro Sepia");
        sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(sepia);

        luzNegra.setText("Filtro Luz Negra");
        luzNegra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                luzNegraActionPerformed(evt);
            }
        });
        menu_ajusteDeColor.add(luzNegra);

        jMenuBar2.add(menu_ajusteDeColor);

        menu_mosaicos.setText("Mosaicos");

        mosaico.setText("Filtro Mosaico");
        mosaico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mosaicoActionPerformed(evt);
            }
        });
        menu_mosaicos.add(mosaico);

        recursivas.setText("Imágenes Recursivas (Color real)");
        recursivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recursivasActionPerformed(evt);
            }
        });
        menu_mosaicos.add(recursivas);

        sopaLetras.setText("Sopa de Letras");
        sopaLetras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sopaLetrasActionPerformed(evt);
            }
        });
        menu_mosaicos.add(sopaLetras);

        hombresNegro.setText("Hombres de Negro");
        hombresNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hombresNegroActionPerformed(evt);
            }
        });
        menu_mosaicos.add(hombresNegro);

        jMenuBar2.add(menu_mosaicos);

        menu_contrastes.setText("Contrastes");

        inverso.setText("Filtro Inverso");
        inverso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversoActionPerformed(evt);
            }
        });
        menu_contrastes.add(inverso);

        altoContraste.setText("Filtro Alto Contraste");
        altoContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altoContrasteActionPerformed(evt);
            }
        });
        menu_contrastes.add(altoContraste);

        semitonos.setText("Filtro Semitonos");
        semitonos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semitonosActionPerformed(evt);
            }
        });
        menu_contrastes.add(semitonos);

        jMenuBar2.add(menu_contrastes);

        menu_artisticos.setText("Artisticos");

        att.setText("Filtro AT&T");
        att.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attActionPerformed(evt);
            }
        });
        menu_artisticos.add(att);

        jMenuBar2.add(menu_artisticos);

        menu_combinar.setText("Combinar Imágenes");

        blending.setText("Filtro Blending");
        blending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendingActionPerformed(evt);
            }
        });
        menu_combinar.add(blending);

        jMenuBar2.add(menu_combinar);

        menu_iconos.setText("Iconos");

        favicon.setText("Favicones");
        menu_iconos.add(favicon);

        creadorIconos.setText("Creador de iconos");
        creadorIconos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creadorIconosActionPerformed(evt);
            }
        });
        menu_iconos.add(creadorIconos);

        jMenuBar2.add(menu_iconos);

        menu_marcaAgua.setText("Marca de Agua");

        marcaAgua.setText("Filtro Marca de Agua");
        marcaAgua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marcaAguaActionPerformed(evt);
            }
        });
        menu_marcaAgua.add(marcaAgua);

        jMenuBar2.add(menu_marcaAgua);

        menu_rotar.setText("Rotar");

        rotar.setText("Filtro Rotar Imagen");
        rotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotarActionPerformed(evt);
            }
        });
        menu_rotar.add(rotar);

        jMenuItem2.setText("Rotar con Matriz");
        menu_rotar.add(jMenuItem2);

        jMenuBar2.add(menu_rotar);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(220, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(img, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        imagen = procesador.abreImagen();
        copia = procesador.copia();
        img.setIcon(new ImageIcon(imagen.getScaledInstance(img.getWidth(), 
                img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Imagen cargada");
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        procesador.guardaImagen();
        progreso.setText("Imagen guardada");
    }//GEN-LAST:event_guardarActionPerformed

    private void reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarActionPerformed
        reinicia();
        progreso.setText("Cambios deshechos");
    }//GEN-LAST:event_reiniciarActionPerformed

    private void rojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.rojo().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_rojoActionPerformed

    private void azulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        
        img.setIcon(new ImageIcon(procesador.azul().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
        
    }//GEN-LAST:event_azulActionPerformed

    private void verdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.verde().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_verdeActionPerformed

    private void rgbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int r = sliderRGB("Rojo: ");
        int g = sliderRGB("Verde: ");
        int b = sliderRGB("Azul: ");
        img.setIcon(new ImageIcon(procesador.rgb(r,g,b).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_rgbActionPerformed

    private void brilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brilloActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = sliderBrillo();
        img.setIcon(new ImageIcon(procesador.brillo(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_brilloActionPerformed

    private void azarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azarActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.azar().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_azarActionPerformed

    private void grisesPromedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesPromedioActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.grisesAverage().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesPromedioActionPerformed

    private void grisesLumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesLumaActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.grisesLuma().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesLumaActionPerformed

    private void grisesDesaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesDesaturationActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.grisesDesaturation().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesDesaturationActionPerformed

    private void grisesDescompositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesDescompositionActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        Object seleccion = JOptionPane.showInputDialog(null, 
                "Selecciona: ", null, JOptionPane.QUESTION_MESSAGE, null, 
                new Object[] { "Mínimo", "Máximo"}, "Mínimo");
        int s = -1;
        if (seleccion.equals("Mínimo"))
            s = 0;
        if (seleccion.equals("Máximo"))
            s = 1;
        img.setIcon(new ImageIcon(procesador.grisesDescomposition(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesDescompositionActionPerformed

    private void grisesSingleColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesSingleColorActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        Object seleccion = JOptionPane.showInputDialog(null, 
                "Selecciona color: ", null, JOptionPane.QUESTION_MESSAGE, null, 
                new Object[] { "Rojo", "Verde", "Azul"}, "Rojo");
        int s = -1;
        if (seleccion.equals("Rojo"))
            s = 0;
        if (seleccion.equals("Verde"))
            s = 1;
        if (seleccion.equals("Azul"))
            s = 2;
        img.setIcon(new ImageIcon(procesador.grisesSingleColor(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesSingleColorActionPerformed

    private void grisesShadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesShadesActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = sliderShades();
        img.setIcon(new ImageIcon(procesador.grisesShades(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesShadesActionPerformed

    private void grisesDitheringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesDitheringActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = sliderShades();
        img.setIcon(new ImageIcon(procesador.grisesDithering(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_grisesDitheringActionPerformed

    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = sliderSepia();
        img.setIcon(new ImageIcon(procesador.sepia(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_sepiaActionPerformed

    private void luzNegraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_luzNegraActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.blacklight().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_luzNegraActionPerformed

    private void mosaicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mosaicoActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        String op = JOptionPane.showInputDialog("Ancho: ");
        int x = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Altura: ");
        int y = Integer.parseInt(op);
        img.setIcon(new ImageIcon(procesador.mosaico(x,y).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_mosaicoActionPerformed

    private void recursivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recursivasActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        String op = JOptionPane.showInputDialog("Ancho: ");
        int x = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Altura: ");
        int y = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Nombre del archivo HTML: ");
        try {
            File nuevo = new File("");
            String n = nuevo.getCanonicalPath();
            nuevo = new File(String.format("%s/imagenes", n));
            nuevo.mkdir();
        } catch (IOException e) { }
        String ruta = String.format("imagenes/%s.html", op);
        FileWriter archivo = null;
        PrintWriter pw = null;
        try {
            archivo = new FileWriter(ruta);
            pw = new PrintWriter(archivo);
            pw.println(procesador.recursiva(x, y));
        } catch (IOException e) {
        } finally {
            try {
                if (null != archivo)
                    archivo.close();
            } catch(IOException e) { }
        }
        abreURL(ruta);
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_recursivasActionPerformed

    private void inversoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversoActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.filtroInverso().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_inversoActionPerformed

    private void altoContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altoContrasteActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.altoContraste().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_altoContrasteActionPerformed

    private void semitonosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semitonosActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = sliderShades();
        img.setIcon(new ImageIcon(procesador.semitonos(s).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_semitonosActionPerformed

    private void attActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        img.setIcon(new ImageIcon(procesador.att().getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_attActionPerformed

    private void blendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendingActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        BufferedImage otra = otra();
        if (imagen.getWidth() != otra.getWidth() || 
                imagen.getHeight() != otra.getHeight()) {
            progreso.setText("La imagen no es del mismo tamaño");
            return;
        }
        img.setIcon(new ImageIcon(procesador.blending(otra, 0.7).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_blendingActionPerformed

    private void creadorIconosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creadorIconosActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        Object seleccion = JOptionPane.showInputDialog(null, 
                "Selecciona color: ", null, JOptionPane.QUESTION_MESSAGE, null, 
                new Object[] { "16x16", "24x24", "32x32", "48x48", "64x64"}, "16x16");
        int s = -1;
        if (seleccion.equals("16x16"))
            s = 16;
        if (seleccion.equals("32x32"))
            s = 32;
        if (seleccion.equals("48x48"))
            s = 48;
        if (seleccion.equals("64x64"))
            s = 64;
        procesador.icono(s, s);
        procesador.guardaIcono();
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_creadorIconosActionPerformed

    private void marcaAguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marcaAguaActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        String mensaje = JOptionPane.showInputDialog("Mensaje: ");
        Object tipo = JOptionPane.showInputDialog(null, "Selecciona tipo: ", 
                null, JOptionPane.QUESTION_MESSAGE, null, new Object[] { 
                    "Color", "Negro"}, "Color");
        int t = 0;
        if (tipo.equals("Color"))
            t = Procesador.COLOR;
        if (tipo.equals("Negro"))
            t = Procesador.BLACK;
        Object region = JOptionPane.showInputDialog(null, "Selecciona región", 
                null, JOptionPane.QUESTION_MESSAGE, null, new Object[] { 
                    "Superior Izquierda", "Superior Derecha", 
                    "Inferior Izquierda", "Inferior Derecha"}, "Superior Izquierda");
        int r = 0;
        if (region.equals("Superior Izquierda"))
            r = Procesador.SUP_IZQ;
        if (region.equals("Superior Derecha"))
            r = Procesador.SUP_DER;
        if (region.equals("Inferior Izquierda"))
            r = Procesador.INF_IZQ;
        if (region.equals("Inferior Derecha"))
            r = Procesador.INF_DER;
        img.setIcon(new ImageIcon(procesador.marcaAgua(mensaje,r,t).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_marcaAguaActionPerformed

    private void rotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotarActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        int s = JOptionPane.showOptionDialog(null, "Selecciona una opción: ", 
                null, JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, null, new Object[] {"0°", 
                    "90°", "180°", "270°"}, "0°");
        int g = s * 90;
        img.setIcon(new ImageIcon(procesador.rota(g).getScaledInstance(
                img.getWidth(), img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_rotarActionPerformed

    private void sopaLetrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sopaLetrasActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        String op = JOptionPane.showInputDialog("Ancho: ");
        int x = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Altura: ");
        int y = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Nombre del archivo HTML: ");
        String ruta = String.format("%s.html", op);
        FileWriter archivo = null;
        PrintWriter pw = null;
        try {
            archivo = new FileWriter(ruta);
            pw = new PrintWriter(archivo);
            pw.println(procesador.sopaLetras(x, y));
        } catch (IOException e) {
        } finally {
            try {
                if (null != archivo)
                    archivo.close();
            } catch(IOException e) { }
        }
        abreURL(ruta);
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_sopaLetrasActionPerformed

    private void hombresNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hombresNegroActionPerformed
        if (imagen == null)
            return;
        progreso.setText("Procesando...");
        String op = JOptionPane.showInputDialog("Ancho: ");
        int x = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Altura: ");
        int y = Integer.parseInt(op);
        op = JOptionPane.showInputDialog("Nombre del archivo HTML: ");
        try {
            File nuevo = new File("");
            String n = nuevo.getCanonicalPath();
            nuevo = new File(String.format("%s/mib", n));
            nuevo.mkdir();
        } catch (IOException e) { }
        String ruta = String.format("mib/%s.html", op);
        FileWriter archivo = null;
        PrintWriter pw = null;
        try {
            archivo = new FileWriter(ruta);
            pw = new PrintWriter(archivo);
            pw.println(procesador.menInBlack(x, y));
        } catch (IOException e) {
        } finally {
            try {
                if (null != archivo)
                    archivo.close();
            } catch(IOException e) { }
        }
        abreURL(ruta);
        progreso.setText("Filtro aplicado");
    }//GEN-LAST:event_hombresNegroActionPerformed

    /* AUXILIAR PARA REINICIAR LA IMAGEN. */
    private void reinicia() {
        copia = procesador.copia();
        img.setIcon(new ImageIcon(copia.getScaledInstance(img.getWidth(), 
                img.getHeight(), Image.SCALE_DEFAULT)));
        progreso.setText("");
    }
    
    /* SLIDER PARA COLORES R, G Y B. */
    private int sliderRGB(String color) {
        JFrame parent = new JFrame();
        JOptionPane op = new JOptionPane();
        JSlider slider = getSlider(op, 0, 255, 51);
        op.setMessage(new Object[] {color, slider});
        op.setMessageType(JOptionPane.QUESTION_MESSAGE);
        op.setOptionType(JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = op.createDialog(parent, color);
        dialog.setVisible(true);
        return (int)op.getInputValue();
    }
    
    /* SLIDER PARA BRILLO. */
    private int sliderBrillo() {
        JFrame parent = new JFrame();
        JOptionPane op = new JOptionPane();
        JSlider slider = getSlider(op, -255, 255, 101);
        op.setMessage(new Object[] {"Brillo: ", slider});
        op.setMessageType(JOptionPane.QUESTION_MESSAGE);
        op.setOptionType(JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = op.createDialog(parent, "Brillo");
        dialog.setVisible(true);
        return (int)op.getInputValue();
    }
    
    /* SLIDER PARA SOMBRAS. */
    private int sliderShades() {
        JFrame parent = new JFrame();
        JOptionPane op = new JOptionPane();
        JSlider slider = getSlider(op, 2, 256, 101);
        op.setMessage(new Object[] {"Sombra: ", slider});
        op.setMessageType(JOptionPane.QUESTION_MESSAGE);
        op.setOptionType(JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = op.createDialog(parent, "Sombras");
        dialog.setVisible(true);
        return (int)op.getInputValue();
    }
    
    /* SLIDER PARA SEPIA. */
    private int sliderSepia() {
        JFrame parent = new JFrame();
        JOptionPane op = new JOptionPane();
        JSlider slider = getSlider(op, 1, 255, 51);
        op.setMessage(new Object[] {"Amarillo: ", slider});
        op.setMessageType(JOptionPane.QUESTION_MESSAGE);
        op.setOptionType(JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = op.createDialog(parent, "Amarillos");
        dialog.setVisible(true);
        return (int)op.getInputValue();
    }
    
    /* AUXILIAR PARA CREAR SLIDERS. */
    private JSlider getSlider(final JOptionPane op, int min, int max, int esp) {
        JSlider slider = new JSlider(min, max);
        slider.setMajorTickSpacing(esp);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        ChangeListener changeListener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
                JSlider sldr = (JSlider)ce.getSource();
                if (!sldr.getValueIsAdjusting())
                    op.setInputValue(sldr.getValue());
            }
        };
        slider.addChangeListener(changeListener);
        return slider;
    }
    
    /* AUXILIAR PARA ABRIR UN HTML. */
    private void abreURL(String url) {
        String osName = System.getProperty("os.name");
        try {
            if (osName.startsWith("Windows"))
                Runtime.getRuntime().exec(
                        "rundll32 url.dll,FileProtocolHandler " + url);
            else if (osName.startsWith("Mac OS X"))
                Runtime.getRuntime().exec("open" + url);
            else
                Runtime.getRuntime().exec("google-chrome " + url);
        } catch (IOException e) {
            System.out.println("Error al abrir el explorador.");
        }
    }
    
    /* AUXILIAR PARA ESCOGER OTRA IMAGEN. */
    private BufferedImage otra() {
        JFileChooser selector = new JFileChooser();
        selector.setDialogTitle("Selecciona una imagen");
        FileNameExtensionFilter filtro =
                new FileNameExtensionFilter("jpg, jpeg, bmp, png", "jpg", 
                        "jpeg", "bmp", "png");
        selector.setFileFilter(filtro);
        int aux = selector.showOpenDialog(null);
        BufferedImage otra = null;
        if (aux == JFileChooser.APPROVE_OPTION) {
            try {
                File file = selector.getSelectedFile();
                otra = ImageIO.read(file);
            } catch (IOException e) { }
        }
        return otra;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenuItem altoContraste;
    private javax.swing.JMenuItem att;
    private javax.swing.JMenuItem azar;
    private javax.swing.JMenuItem azul;
    private javax.swing.JMenuItem blending;
    private javax.swing.JMenuItem brillo;
    private javax.swing.JMenuItem creadorIconos;
    private javax.swing.JMenuItem favicon;
    private javax.swing.JMenuItem grisesDesaturation;
    private javax.swing.JMenuItem grisesDescomposition;
    private javax.swing.JMenuItem grisesDithering;
    private javax.swing.JMenuItem grisesLuma;
    private javax.swing.JMenuItem grisesPromedio;
    private javax.swing.JMenuItem grisesShades;
    private javax.swing.JMenuItem grisesSingleColor;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem hombresNegro;
    private javax.swing.JLabel img;
    private javax.swing.JMenuItem inverso;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem luzNegra;
    private javax.swing.JMenuItem marcaAgua;
    private javax.swing.JMenu menu_ajusteDeColor;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_artisticos;
    private javax.swing.JMenu menu_combinar;
    private javax.swing.JMenu menu_contrastes;
    private javax.swing.JMenu menu_iconos;
    private javax.swing.JMenu menu_marcaAgua;
    private javax.swing.JMenu menu_mosaicos;
    private javax.swing.JMenu menu_rotar;
    private javax.swing.JMenuItem mosaico;
    private javax.swing.JTextField progreso;
    private javax.swing.JMenuItem recursivas;
    private javax.swing.JMenuItem reiniciar;
    private javax.swing.JMenuItem rgb;
    private javax.swing.JMenuItem rojo;
    private javax.swing.JMenuItem rotar;
    private javax.swing.JMenuItem semitonos;
    private javax.swing.JMenuItem sepia;
    private javax.swing.JMenuItem sopaLetras;
    private javax.swing.JMenuItem verde;
    // End of variables declaration//GEN-END:variables
}
